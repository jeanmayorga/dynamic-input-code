{"version":3,"sources":["pages/index.tsx","index.tsx"],"names":["App","useState","code","setCode","splittedCode","setSplittedCode","numberOfInputs","inputsRef","useRef","map","createRef","className","_input","currentIndex","type","placeholder","maxLength","onChange","event","options","value","target","newCode","handleChange","onPaste","splittedClipboardData","clipboardData","getData","split","current","forEach","input","index","blur","slice","length","handlePaste","onKeyUp","currentTarget","nextInput","prevInput","keyCode","focus","handleKeyUp","onFocus","select","ref","key","onClick","join","ReactDOM","render","document","getElementById"],"mappings":"iLAEO,SAASA,IAAO,IAAD,EACIC,qBADJ,mBACbC,EADa,KACPC,EADO,OAEoBF,mBAAmB,IAFvC,mBAEbG,EAFa,KAECC,EAFD,KAIdC,EAAiB,CAAC,EAAG,EAAG,EAAG,EAAG,GAC9BC,EAAYC,iBAAOF,EAAeG,KAAI,kBAAMC,0BA+ClD,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACb,mDACA,uBAAGA,UAAU,SAAb,yBACCT,GAAQ,uBAAGS,UAAU,SAAb,iBAAoCT,GAC7C,yBAAKS,UAAU,iBACb,yBAAKA,UAAU,SACZL,EAAeG,KAAI,SAACG,EAAQC,GAAT,OAClB,2BACEC,KAAK,OACLC,YAAY,IACZC,UAAW,EACXC,SAAU,SAAAC,GAAK,OA1DR,SAACC,GACpB,IAAMC,EAAQD,EAAQD,MAAMG,OAAOD,MAC7BP,EAAeM,EAAQN,aACvBS,EAAUlB,EAChBA,EAAaS,GAAgBO,EAC7Bf,EAAgBiB,GAqDeC,CAAa,CAAEL,QAAOL,kBACzCW,QAAS,SAAAN,GAAK,OAnDR,SAACC,GACnB,IACMM,EADgBN,EAAQD,MAAMQ,cAAcC,QAAQ,QACdC,MAAM,IAClDrB,EAAUsB,QAAQC,SAAQ,SAACC,EAAOC,GAChCD,EAAMF,QAAQT,MAAQK,EAAsBO,GAC5CD,EAAMF,QAAQI,UAEhB,IAAMX,EAAUG,EAAsBS,MAAM,EAAG5B,EAAe6B,QAC9D9B,EAAgBiB,GA2Ccc,CAAY,CAAElB,WAChCmB,QAAS,SAAAnB,GAAK,OAzCR,SAACC,GAA+E,IAAD,IAC3FD,EAAQC,EAAQD,MAChBL,EAAeM,EAAQN,aACvBO,EAAQF,EAAMoB,cAAclB,MAC5BmB,EAAS,UAAGhC,EAAUsB,QAAQhB,EAAe,UAApC,aAAG,EAAqCgB,QACjDW,EAAS,UAAGjC,EAAUsB,QAAQhB,EAAe,UAApC,aAAG,EAAqCgB,QAEvD,GAAsB,IAAlBX,EAAMuB,QAKLrB,GACAmB,GACLA,EAAUG,YAPV,CACE,IAAKF,EAAW,OAChBA,EAAUE,SAgCkBC,CAAY,CAAEzB,QAAOL,kBACvC+B,QAAS,SAAA1B,GAAK,MAAgB,CAAEA,SAxB7BA,MAAMG,OAAOwB,UAyBhBC,IAAKvC,EAAUsB,QAAQhB,GACvBkC,IAAKlC,QAIX,4BAAQF,UAAU,WAAWqC,QA3BZ,WACvB,IAAM9C,EAAOE,EAAa6C,KAAK,IAC/B9C,EAAQD,KAyBF,gB,KCtEVgD,IAASC,OAAO,kBAACnD,EAAD,MAASoD,SAASC,eAAe,U","file":"static/js/main.bf2c28f3.chunk.js","sourcesContent":["import React, { useState, useRef, createRef, KeyboardEvent, ClipboardEvent, FocusEvent } from 'react';\n\nexport function App() {\n  const [code, setCode] = useState<string>();\n  const [splittedCode, setSplittedCode] = useState<string[]>([]);\n\n  const numberOfInputs = [1, 2, 3, 4, 5];\n  const inputsRef = useRef(numberOfInputs.map(() => createRef() as React.MutableRefObject<HTMLInputElement>));\n\n  const handleChange = (options: { event: React.ChangeEvent<HTMLInputElement>; currentIndex: number }) => {\n    const value = options.event.target.value;\n    const currentIndex = options.currentIndex;\n    const newCode = splittedCode;\n    splittedCode[currentIndex] = value;\n    setSplittedCode(newCode);\n  };\n\n  const handlePaste = (options: { event: ClipboardEvent<HTMLInputElement> }) => {\n    const clipboardData = options.event.clipboardData.getData('Text');\n    const splittedClipboardData = clipboardData.split('');\n    inputsRef.current.forEach((input, index) => {\n      input.current.value = splittedClipboardData[index];\n      input.current.blur();\n    });\n    const newCode = splittedClipboardData.slice(0, numberOfInputs.length);\n    setSplittedCode(newCode);\n  };\n\n  const handleKeyUp = (options: { event: KeyboardEvent<HTMLInputElement>; currentIndex: number }) => {\n    const event = options.event;\n    const currentIndex = options.currentIndex;\n    const value = event.currentTarget.value;\n    const nextInput = inputsRef.current[currentIndex + 1]?.current;\n    const prevInput = inputsRef.current[currentIndex - 1]?.current;\n\n    if (event.keyCode === 8) {\n      if (!prevInput) return;\n      prevInput.focus();\n      return;\n    }\n    if (!value) return;\n    if (!nextInput) return;\n    nextInput.focus();\n  };\n\n  const handleFocus = (options: { event: FocusEvent<HTMLInputElement> }) => {\n    return options.event.target.select();\n  };\n\n  const handleVerifyCode = () => {\n    const code = splittedCode.join('');\n    setCode(code);\n  };\n\n  return (\n    <div className='app'>\n      <div className='container'>\n        <h1>Dynamic input code!</h1>\n        <p className='white'>Paste/Write your code</p>\n        {code && <p className='white'>Your code is: {code}</p>}\n        <div className='input-numbers'>\n          <div className='input'>\n            {numberOfInputs.map((_input, currentIndex) => (\n              <input\n                type='text'\n                placeholder=' '\n                maxLength={1}\n                onChange={event => handleChange({ event, currentIndex })}\n                onPaste={event => handlePaste({ event })}\n                onKeyUp={event => handleKeyUp({ event, currentIndex })}\n                onFocus={event => handleFocus({ event })}\n                ref={inputsRef.current[currentIndex]}\n                key={currentIndex}\n              />\n            ))}\n          </div>\n          <button className='priv-btn' onClick={handleVerifyCode}>\n            Continuar\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './pages';\n\nimport './styles/global.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}